// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pb/core.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LandmarkClient is the client API for Landmark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LandmarkClient interface {
	GetResult(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
}

type landmarkClient struct {
	cc grpc.ClientConnInterface
}

func NewLandmarkClient(cc grpc.ClientConnInterface) LandmarkClient {
	return &landmarkClient{cc}
}

func (c *landmarkClient) GetResult(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/pb.landmark/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LandmarkServer is the server API for Landmark service.
// All implementations must embed UnimplementedLandmarkServer
// for forward compatibility
type LandmarkServer interface {
	GetResult(context.Context, *Point) (*Feature, error)
	mustEmbedUnimplementedLandmarkServer()
}

// UnimplementedLandmarkServer must be embedded to have forward compatible implementations.
type UnimplementedLandmarkServer struct {
}

func (UnimplementedLandmarkServer) GetResult(context.Context, *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedLandmarkServer) mustEmbedUnimplementedLandmarkServer() {}

// UnsafeLandmarkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LandmarkServer will
// result in compilation errors.
type UnsafeLandmarkServer interface {
	mustEmbedUnimplementedLandmarkServer()
}

func RegisterLandmarkServer(s grpc.ServiceRegistrar, srv LandmarkServer) {
	s.RegisterService(&Landmark_ServiceDesc, srv)
}

func _Landmark_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandmarkServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.landmark/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandmarkServer).GetResult(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

// Landmark_ServiceDesc is the grpc.ServiceDesc for Landmark service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Landmark_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.landmark",
	HandlerType: (*LandmarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResult",
			Handler:    _Landmark_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/core.proto",
}
